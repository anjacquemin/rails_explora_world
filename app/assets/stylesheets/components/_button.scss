.tab-ghost {
	// display: inline-block;
	// padding: .75rem 1.25rem;
	// border-radius: 4px;
	// color: #0B7DC2;
	// text-transform: uppercase;
	// font-size: 1rem;
	// letter-spacing: .15rem;
	// transition: all .3s;
	// position: relative;
	// overflow: hidden;
	// z-index: 1;
  // font-family: $body-font;
	// &:after {
	// 	content: '';
	// 	position: absolute;
	// 	bottom: 0;
	// 	left: 0;
	// 	width: 100%;
	// 	height: 100%;
	// 	background-color: #0B7DC2;
	// 	position: absolute;
	// 	bottom: 0;
	// 	left: 0;
	// 	width: 0%;
	// 	height: 100%;
	// 	background-color: darken($blue, 15%);
	// 	transition: all .3s;
	// 	border-radius: 10rem;
	// 	z-index: -1;
	// }
	// &:hover {
	// 	color: #0B7DC2;
	// 	&:before {
	// 		width: 100%;
	// 	}
	// }
  color: #0B7DC2;
  background-color: #0B7DC21A;
  padding: 5px 10px;
  border-radius: 10px;
  border: 1px solid #0B7DC2;
  margin: 0px 20px;
  transition: all .3s;
  outline: none;
  &:hover{
    background-color: #0B7DC2;
    color: white;
  }
  &:focus{
    outline:none !important;
    box-shadow: none !important;
  }
}

.btn-ghost-small {
	display: inline-block;
	padding: .75rem 1.25rem;
	border-radius: 10rem;
	color: #fff;
	text-transform: uppercase;
	font-size: 1rem;
	letter-spacing: .15rem;
	transition: all .3s;
	position: relative;
	overflow: hidden;
	z-index: 1;
  font-family: $headers-font;
	&:after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: $text_gray;
		border-radius: 10rem;
		z-index: -2;
	}
	&:before {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 0%;
		height: 100%;
		background-color: darken($blue, 15%);
		transition: all .3s;
		border-radius: 10rem;
		z-index: -1;
	}
	&:hover {
		color: #fff;
		&:before {
			width: 100%;
		}
	}
}

.btn-ghost{

  display: inline-block;
  padding: .75rem 1.25rem;
  border-radius: 4px;
  background-color: #0B7DC2;

  border-radius: 14px;
  border: 0.5px solid grey;
  color: white;
  text-transform: uppercase;
  font-size: 1rem;
  letter-spacing: .15rem;
  transition: all .3s;
  position: relative;
  overflow: hidden;
  z-index: 1;
  font-family: $body-font;
  &:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    color: #0B7DC2;
    background-color: white;
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0%;
    height: 100%;
    background-color: darken($blue, 15%);
    transition: all .3s;
    border-radius: 10rem;
    z-index: -1;
  }
  &:hover {
  background-color: white;
  color: #0B7DC2;
  &:before {
    width: 100%;
  }
  }
}

.tab-ghost.active {
  background-color: #0B7DC2;
  color: white;
  outline: none;
}



/////////////////////////////////////////////////
.fill:hover,
.fill:focus {
  box-shadow: inset 0 0 0 2em var(--color);
}

// Animate the size, outside
.pulse:hover,
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em rgba(#fff,0);
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

// Stack multiple shadows, one from the left, the other from the right
.close:hover,
.close:focus {
  box-shadow:
    inset -3.5em 0 0 0 var(--hover),
    inset 3.5em 0 0 0 var(--hover);
}

// Size can also be negative; see how it's smaller than the element
.raise:hover,
.raise:focus {
  box-shadow: 0 0.5em 0.5em -0.4em var(--hover);
  transform: translateY(-0.25em);
}

// Animating from the bottom
.up:hover,
.up:focus {
  box-shadow: inset 0 -3.25em 0 0 var(--hover);
}

// And from the left
.slide:hover,
.slide:focus {
  box-shadow: inset 6.5em 0 0 0 var(--hover);
}

// Multiple shadows, one on the outside, another on the inside
.offset {
  box-shadow:
    0.3em 0.3em 0 0 var(--color),
    inset 0.3em 0.3em 0 0 var(--color);

  &:hover,
  &:focus {
    box-shadow:
      0 0 0 0 var(--hover),
      inset 6em 3.5em 0 0 var(--hover);
  }
}

//=== Set button colors
// If you wonder why use Sass vars or CSS custom properties...
  // Make a map with the class names and matching colors
$colors: (
  fill: #0B7DC2,
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
.fill {
  color: var(--color);
  transition: 0.25s;

  &:hover,
  &:focus {
    border-color: var(--color);
    color: #fff;
  }
}

.fill {
  background: none;
  border: 2px solid;
  font: inherit;
  line-height: 1;
  margin: 0.5em;
  padding: 1em 2em;
  border-radius: 18px;
}
